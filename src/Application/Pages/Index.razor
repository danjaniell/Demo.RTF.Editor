@page "/"
@using Application.Pages
<PageTitle>Home</PageTitle>

<div class="rz-p-12">
    <div class = "rz-text-align-center">
        <RadzenSelectBar @bind-Value=@selectedComponent TValue="EditorType" class="mb-5">
            <Items>
                @foreach (var dataItem in data)
                {
                    <RadzenSelectBarItem Text="@dataItem.Name" Value="@dataItem.Type" Disabled="@(dataItem.IsDisabled)" Visible="@(dataItem.IsVisible)"  />
                }
            </Items>
        </RadzenSelectBar>
    </div>
    @if (selectedComponent > 0)
    {
        @data[(int)selectedComponent - 1].Component
    }
</div>

@code {
    public enum EditorType
    {
        JoditEditor = 1,
        CKEditor,
        QuillEditor,
        PellEditor,
        FroalaEditor,
        RadzenEditor,
        BlazoriseEditor
    }

    EditorType selectedComponent = 0;

    public class EditorOption
    {
        public EditorType Type { get; set; }
        public string? Name { get; set; }
        public RenderFragment? Component { get; set; }
        public bool IsDisabled { get; set; } = false;
        public bool IsVisible { get; set; } = true;
    }

    EditorOption[] data = new EditorOption[]
    {
        new EditorOption() {
            Type = EditorType.JoditEditor,
            Name = "jodit",
            Component = builder =>
            {
                builder.OpenComponent<JoditEditor>(0);
                builder.CloseComponent();
            }
        },
        new EditorOption() {
            Type = EditorType.CKEditor,
            Name = "CKEditor",
            Component = builder =>
            {
                builder.OpenComponent<CKEditor>(0);
                builder.CloseComponent();
            }
        },
        new EditorOption() {
            Type = EditorType.QuillEditor,
            Name = "QuillJs",
            Component = builder =>
            {
                builder.OpenComponent<QuillEditor>(0);
                builder.CloseComponent();
            }
        },
        new EditorOption() {
            Type = EditorType.PellEditor,
            Name = "pell",
            Component = builder =>
            {
                builder.OpenComponent<PellEditor>(0);
                builder.CloseComponent();
            }
        },
        new EditorOption() {
            Type = EditorType.FroalaEditor,
            Name = "Froala",
            Component = builder =>
            {
                builder.OpenComponent<FroalaEditor>(0);
                builder.CloseComponent();
            }
        },
        new EditorOption() {
            Type = EditorType.RadzenEditor,
            Name = "Radzen HTMLEditor",
            Component = builder =>
            {
                builder.OpenComponent<RadzenEditor>(0);
                builder.CloseComponent();
            }
        },
        new EditorOption() {
            Type = EditorType.BlazoriseEditor,
            Name = "Blazorise RichTextEdit",
            Component = builder =>
            {
                builder.OpenComponent<BlazoriseEditor>(0);
                builder.CloseComponent();
            }
        }
    };
}
