@using Application.Models

<RadzenCard>
    <RadzenRadioButtonList @bind-Value=@selectedStrategy TValue="int" class="mb-5" Orientation="Radzen.Orientation.Horizontal">
        <Items>
            <RadzenRadioButtonListItem Text="WkHTML" Value=1/>
            <RadzenRadioButtonListItem Text="PhantomJS" Value=2 />
            <RadzenRadioButtonListItem Text="WeasyPrint" Value=3 />
            <RadzenRadioButtonListItem Text="Puppeteer" Value=4 />
        </Items>
    </RadzenRadioButtonList>
    <RadzenButton Click=@(() => GeneratePdf()) Text="Generate PDF"></RadzenButton>
</RadzenCard>

@code {
    [Inject] PdfConverter<WkHtmlToPdfConversionStrategy> wkHtmlToPdfConverter { get; set; }
    [Inject] PdfConverter<PhantomJsPdfConversionStrategy> phantomJsConverter { get; set; }
    [Inject] PdfConverter<WeasyPrintPdfConversionStrategy> weasyPrintConverter { get; set; }
    [Inject] PdfConverter<PuppeteerSharpPdfConversionStrategy> puppeteerConverter { get; set; }
    [Parameter] public string HtmlValue { get; set; }
    private PdfItem pdfItem;
    private int selectedStrategy = 1;

    private async Task GeneratePdf()
    {
        switch (selectedStrategy)
        {
            case 1:
                pdfItem = await wkHtmlToPdfConverter.GeneratePdfFromHtmlAsync(HtmlValue);
                break;
            case 2:
                pdfItem = await phantomJsConverter.GeneratePdfFromHtmlAsync(HtmlValue);
                break;
            case 3:
                pdfItem = await weasyPrintConverter.GeneratePdfFromHtmlAsync(HtmlValue);
                break;
            case 4:
                pdfItem = await puppeteerConverter.GeneratePdfFromHtmlAsync(HtmlValue);
                break;
            default:
                break;
        }
        string blobUrl = await GetBlobUrl(pdfItem.Bytes);
        await OpenPdfInNewTab(blobUrl);
    }

    private async Task OpenPdfInNewTab(string dataUri)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"let _discard_ = open(`{dataUri}`, `_blank`)");
    }

    private async Task<string> GetBlobUrl(byte[] pdfBytes)
    {
        return await JSRuntime.InvokeAsync<string>("createBlobFromByteArray", pdfBytes);
    }


}