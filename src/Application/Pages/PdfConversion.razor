@using Application.Models
@using Services.Interface
@inject IServiceProvider _serviceProvider;

<TemplateSelector HtmlTemplateValue="@HtmlValue" HtmlTemplateValueChanged="UpdateHtmlValue" />
<RadzenCard>
    <RadzenRadioButtonList @bind-Value=@selectedStrategy TValue="Type" class="mb-5" Orientation="Radzen.Orientation.Horizontal">
        <Items>
            <RadzenRadioButtonListItem Text="WkHTML" Value="@typeof(WkHtmlToPdfConversionStrategy)"/>
            <RadzenRadioButtonListItem Text="PhantomJS" Value="@typeof(PhantomJsPdfConversionStrategy)" />
            <RadzenRadioButtonListItem Text="WeasyPrint" Value="@typeof(WeasyPrintPdfConversionStrategy)" />
            <RadzenRadioButtonListItem Text="Puppeteer" Value="@typeof(PuppeteerSharpPdfConversionStrategy)" />
            <RadzenRadioButtonListItem Text="JsPDF" Value="@typeof(JsPdfConversionStrategy)" />
        </Items>
    </RadzenRadioButtonList>
    <RadzenButton Click=@(() => GeneratePdf()) Text="Generate PDF"></RadzenButton>
</RadzenCard>

@code {
    private PdfItem? pdfItem;
    private Type selectedStrategy = typeof(WkHtmlToPdfConversionStrategy);
    [Parameter] public string HtmlValue { get; set; } = "";
    [Parameter] public Action<string> OnTemplateLoad { get; set; }

    private async Task GeneratePdf()
    {
        pdfItem = await CreatePdfConverter(selectedStrategy).GeneratePdfFromHtmlAsync(HtmlValue);
        string blobUrl = await GetBlobUrl(pdfItem.Bytes);
        await OpenPdfInNewTab(blobUrl);
    }

    private async Task OpenPdfInNewTab(string dataUri)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"let _discard_ = open(`{dataUri}`, `_blank`)");
    }

    private async Task<string> GetBlobUrl(byte[] pdfBytes)
    {
        return await JSRuntime.InvokeAsync<string>("createBlobFromByteArray", pdfBytes);
    }

    private void UpdateHtmlValue(string updatedHtmlValue)
    {
        HtmlValue = updatedHtmlValue;
        OnTemplateLoad?.Invoke(updatedHtmlValue);
    }

    public IPdfConverter CreatePdfConverter(Type? selectedStrategy)
    {
        if (selectedStrategy == null)
        {
            throw new ArgumentException("Selected strategy is null.");
        }

        Type pdfConverterType = typeof(PdfConverter<>).MakeGenericType(selectedStrategy);
        return (IPdfConverter)_serviceProvider.GetService(pdfConverterType)!;
    }
}
